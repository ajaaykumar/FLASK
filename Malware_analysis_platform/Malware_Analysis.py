from flask import Flask, request, redirect, render_template
from flask_wtf import FlaskForm
from wtforms import FileField
from flask_wtf.csrf import CSRFProtect
import os
import json
import hashlib
import subprocess

app = Flask(__name__,template_folder='template')
app.config['UPLOAD_FOLDER'] = 'uploads/'
csrf = CSRFProtect(app)

class FileUploadForm(FlaskForm):
    file = FileField()

@app.route("/")
def index():
    form = FileUploadForm()
    return render_template("upload.html", form=form)

@app.route("/upload", methods=["POST"])
def upload():
    file = request.files["file"]
    if file and file.filename != '':
        # Save the uploaded file to the UPLOAD_FOLDER
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(file_path)
        # Perform malware analysis on the uploaded file
        result = analyze(file_path)
        # Store the analysis results
        store_results(result)
        return redirect("/results")
    else:
        return "No file selected"

def analyze(file_path):
    # Compute the SHA-256 hash of the file
    sha256 = hashlib.sha256()
    with open(file_path, 'rb') as f:
        sha256.update(f.read())
    sha256_hash = sha256.hexdigest()
    # Check the file against VirusTotal's database
    virustotal_output = subprocess.check_output(["python", "virustotal.py", "-f", sha256_hash])
    virustotal_output = json.loads(virustotal_output)
    if virustotal_output["response_code"] == 1:
        if virustotal_output["positives"] > 0:
            return "Malware detected"
        else:
            return "No malware detected"
    else:
        return "Error checking against VirusTotal"

def store_results(result):
    with open("results.txt", "w") as f:
        f.write(result)

@app.route("/results")
def results():
    with open("results.txt", "r") as f:
        result = f.read()
    return render_template("results.html", result=result)

if __name__ == "__main__":
    app.config['SECRET_KEY'] = "secretkey"
    app.config['WTF_CSRF_SECRET_KEY'] = "secretkey"
    csrf.init_app(app)
    app.run(debug=True)
