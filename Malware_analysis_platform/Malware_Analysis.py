from flask import Flask, render_template, request, redirect, url_for, send_from_directory
from flask_wtf import FlaskForm
from werkzeug.utils import secure_filename
from wtforms import FileField
import os

app = Flask(__name__,template_folder='template')
app.config['UPLOAD_FOLDER'] = 'uploads/'
app.config['ALLOWED_EXTENSIONS'] = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}
app.secret_key = 'secret'

class FileUploadForm(FlaskForm):
    file = FileField()

# Use Flask to create a web interface for users to upload files and view analysis results
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1] in app.config['ALLOWED_EXTENSIONS']

@app.route('/', methods=['GET', 'POST'])
def upload_file():
    form = FileUploadForm()
    print("***************")
    if request.method == 'POST':
        file = request.files['file']
        print("#####################")
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            return redirect(url_for('uploaded_file', filename=filename))
    print("*****CALL Home.html*************")
    return render_template('home.html', form=form)

# @app.route('/uploads/<filename>')
@app.route("/uploads/<path:filename>")
def uploaded_file(filename):
    analysis_status = check_malware(f"{app.config['UPLOAD_FOLDER']}{filename}")
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

import hashlib
def check_malware(file_path):
    print(f"Inside check_malware function: ")
    print(f"file_path: {file_path}")
    known_malware_hashes = {
        "6a4a8f2cfd5f3c5d8f5e3e3f3f5d9c1a": "Trojan.Example",
        "2b7f8e2cfd5f3c5d8f5e3e3f3f5d9c1a": "Worm.Example",
        # Add more known malware hashes here
    }

    with open(file_path, "rb") as f:
        file_data = f.read()
        file_hash = hashlib.sha1(file_data).hexdigest()
        print(f"file_hash: {file_hash}")

    if file_hash in known_malware_hashes:
        return f"{file_path} is infected with {known_malware_hashes[file_hash]}."
    else:
        return f"{file_path} is clean."



if __name__ == '__main__':
    app.run(debug=True)
